// <auto-generated />
using System;
using DocStream.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DocStream.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221213000738_DatabaseUpdates")]
    partial class DatabaseUpdates
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DocStream.Models.Applicant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApplicantLegalStatusId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhyscialAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProposedBussinessNameId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantLegalStatusId");

                    b.ToTable("Applicants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicantLegalStatusId = 1,
                            ApplicantName = "Bonglis Group",
                            Email = "bonglisgroup@bonglishq.com",
                            MobileNumber = "+2347049375663",
                            PhyscialAddress = "13 Marina, Lagos Island, Lagos",
                            PostalAddress = "13 Marina, Lagos Island, Lagos",
                            ProposedBussinessNameId = 1
                        },
                        new
                        {
                            Id = 2,
                            ApplicantLegalStatusId = 2,
                            ApplicantName = "Nandi Enterprise",
                            Email = "nandienterprise@nandihq.com",
                            MobileNumber = "+2347064375663",
                            PhyscialAddress = "59 Marina, Lagos Island, Lagos",
                            PostalAddress = "59 Marina, Lagos Island, Lagos",
                            ProposedBussinessNameId = 2
                        });
                });

            modelBuilder.Entity("DocStream.Models.ApplicantLegalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BusinessLegalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicantLegalStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusinessLegalStatus = "Sole Proprietor"
                        },
                        new
                        {
                            Id = 2,
                            BusinessLegalStatus = "Partnership"
                        },
                        new
                        {
                            Id = 3,
                            BusinessLegalStatus = "Public Limited Liabilty Company"
                        },
                        new
                        {
                            Id = 4,
                            BusinessLegalStatus = "Private Limited Liabliity Company"
                        },
                        new
                        {
                            Id = 5,
                            BusinessLegalStatus = "Cooperative Society"
                        },
                        new
                        {
                            Id = 6,
                            BusinessLegalStatus = "Other"
                        });
                });

            modelBuilder.Entity("DocStream.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DocStream.Models.Banker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Bankers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "13 Marina, Lagos Island, Lagos",
                            BankName = "Guarantee Trust Bank",
                            Email = "gtb@gtbhq.com",
                            PhoneNumber = "+2347893027493"
                        },
                        new
                        {
                            Id = 2,
                            Address = "78 Marina, Lagos Island, Lagos",
                            BankName = "First Bank",
                            Email = "firstbank@firsthq.com",
                            PhoneNumber = "+2347856027493"
                        });
                });

            modelBuilder.Entity("DocStream.Models.ContactPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<string>("ContactPersonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhyscialAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.ToTable("ContactPerple");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicantId = 1,
                            ContactPersonName = "Ayo Oluwa",
                            Email = "ayooluwa@gmail.com",
                            MobileNumber = "+2347049375663",
                            PhyscialAddress = "1 Marina, Lagos Island, Lagos",
                            PostalAddress = "13 Marina, Lagos Island, Lagos"
                        },
                        new
                        {
                            Id = 2,
                            ApplicantId = 2,
                            ContactPersonName = "Emeka Okoye",
                            Email = "emekaokoye@gmail.com",
                            MobileNumber = "+2347047375663",
                            PhyscialAddress = "7 Marina, Lagos Island, Lagos",
                            PostalAddress = "7 Marina, Lagos Island, Lagos"
                        });
                });

            modelBuilder.Entity("DocStream.Models.Director", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<string>("ConvictionStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryOfUsualResidency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicalAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.ToTable("Directors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicantId = 1,
                            ConvictionStatus = "None",
                            CountryOfUsualResidency = "Nigeria",
                            Name = "Ayo Oluwa",
                            Nationality = "Nigerian",
                            PhysicalAddress = "13 Marina, Lagos Island, Lagos"
                        },
                        new
                        {
                            Id = 2,
                            ApplicantId = 2,
                            ConvictionStatus = "None",
                            CountryOfUsualResidency = "Nigeria",
                            Name = "Emeka Okoye",
                            Nationality = "Nigerian",
                            PhysicalAddress = "54 Marina, Lagos Island, Lagos"
                        });
                });

            modelBuilder.Entity("DocStream.Models.ProposedBusinessName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId")
                        .IsUnique();

                    b.ToTable("ProposedBusinessNames");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicantId = 1,
                            Email = "highplastics@highplastic.com",
                            Location = "Lagos",
                            Name = "High Plastics",
                            PhoneNumber = "+2347893027983",
                            PostalAddress = "13 Marina, Lagos Island, Lagos"
                        },
                        new
                        {
                            Id = 2,
                            ApplicantId = 2,
                            Email = "tasteybakery@tasteybakery.com",
                            Location = "Lagos",
                            Name = "Tastey Bakery",
                            PhoneNumber = "+2348093027983",
                            PostalAddress = "100 Marina, Lagos Island, Lagos"
                        });
                });

            modelBuilder.Entity("DocStream.Models.Shareholder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<string>("ConvictionStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryOfUsualResidency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicalAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.ToTable("Shareholders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicantId = 1,
                            ConvictionStatus = "None",
                            CountryOfUsualResidency = "Nigeria",
                            Name = "Ayo Oluwa",
                            Nationality = "Nigerian",
                            PhysicalAddress = "13 Marina, Lagos Island, Lagos"
                        },
                        new
                        {
                            Id = 2,
                            ApplicantId = 2,
                            ConvictionStatus = "None",
                            CountryOfUsualResidency = "Nigeria",
                            Name = "Emeka Okoye",
                            Nationality = "Nigerian",
                            PhysicalAddress = "54 Marina, Lagos Island, Lagos"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fbb2c206-2e8c-4d90-a9df-66af7e56b0f5",
                            ConcurrencyStamp = "26771ca2-7243-4bbe-81e9-138b9e30b56c",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "5d92e1e3-3094-4916-9e37-7b518389865f",
                            ConcurrencyStamp = "b8310cac-350f-4a2a-ba12-ad1f2566af5f",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DocStream.Models.Applicant", b =>
                {
                    b.HasOne("DocStream.Models.ApplicantLegalStatus", "ApplicantLegalStatus")
                        .WithMany()
                        .HasForeignKey("ApplicantLegalStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicantLegalStatus");
                });

            modelBuilder.Entity("DocStream.Models.ContactPerson", b =>
                {
                    b.HasOne("DocStream.Models.Applicant", "Applicant")
                        .WithMany("contactPeople")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("DocStream.Models.Director", b =>
                {
                    b.HasOne("DocStream.Models.Applicant", "Applicant")
                        .WithMany("Directors")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("DocStream.Models.ProposedBusinessName", b =>
                {
                    b.HasOne("DocStream.Models.Applicant", "Applicant")
                        .WithOne("ProposedBussinessNames")
                        .HasForeignKey("DocStream.Models.ProposedBusinessName", "ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("DocStream.Models.Shareholder", b =>
                {
                    b.HasOne("DocStream.Models.Applicant", "Applicant")
                        .WithMany("shareholders")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DocStream.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DocStream.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocStream.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DocStream.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DocStream.Models.Applicant", b =>
                {
                    b.Navigation("Directors");

                    b.Navigation("ProposedBussinessNames")
                        .IsRequired();

                    b.Navigation("contactPeople");

                    b.Navigation("shareholders");
                });
#pragma warning restore 612, 618
        }
    }
}
